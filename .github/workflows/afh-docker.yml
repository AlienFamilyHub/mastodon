name: Build and Push Mastodon Docker Image

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ghcr.io/alienfamilyhub/mastodon

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      - id: platforms
        run: |
          echo "matrix={\"platform\":[\"linux/amd64\",\"linux/arm64\"]}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: prepare
    # 使用 ubuntu-latest-4-cores 获取更好的性能
    runs-on: ubuntu-latest-4-cores
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
      fail-fast: false
    permissions:
      contents: read
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置环境变量
        id: vars
        run: |
          echo "ARCH=$(echo ${{ matrix.platform }} | cut -d '/' -f2)" >> $GITHUB_OUTPUT
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "DATE=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      # 安装并配置 KVM
      - name: 设置 KVM
        if: contains(matrix.platform, 'arm')
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo usermod -aG kvm $USER
          sudo usermod -aG libvirt $USER
          sudo systemctl enable --now libvirtd
          sudo modprobe kvm
          sudo chmod 666 /dev/kvm

      # 使用 KVM 加速的 QEMU
      - name: 设置 QEMU
        if: contains(matrix.platform, 'arm')
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
          use-kvm: true

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}
          driver-opts: |
            image=moby/buildkit:master
            network=host
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Docker 元数据
      - name: Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=latest-${{ steps.vars.outputs.ARCH }}
            type=raw,value=${{ steps.vars.outputs.DATE }}-${{ steps.vars.outputs.SHA_SHORT }}-${{ steps.vars.outputs.ARCH }}

      # 构建和推送，使用优化的构建参数
      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.platform }}
            type=registry,ref=${{ env.REGISTRY_IMAGE }}:latest-${{ steps.vars.outputs.ARCH }}
            type=registry,ref=${{ env.REGISTRY_IMAGE }}:buildcache-${{ steps.vars.outputs.ARCH }}
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.platform }}
            type=registry,ref=${{ env.REGISTRY_IMAGE }}:buildcache-${{ steps.vars.outputs.ARCH }},mode=max
          # 优化构建参数
          build-args: |
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760
            BUILDKIT_STEP_LOG_MAX_SPEED=10485760
            DOCKER_BUILDKIT=1
          # 添加构建上下文配置
          outputs: type=docker,dest=/tmp/docker-image
          allow: |
            network.host
            security.insecure

  create-manifest:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 创建并推送清单
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          DATE=$(date -u +'%Y-%m-%d')

          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:latest \
            ${{ env.REGISTRY_IMAGE }}:latest-amd64 \
            ${{ env.REGISTRY_IMAGE }}:latest-arm64

          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${DATE}-${SHA_SHORT} \
            ${{ env.REGISTRY_IMAGE }}:${DATE}-${SHA_SHORT}-amd64 \
            ${{ env.REGISTRY_IMAGE }}:${DATE}-${SHA_SHORT}-arm64
