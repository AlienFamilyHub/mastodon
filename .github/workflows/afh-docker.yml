name: Build and Push Mastodon Docker Image

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ghcr.io/alienfamilyhub/mastodon

jobs:
  # 第一步：准备构建矩阵
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      - id: platforms
        run: |
          echo "matrix={\"platform\":[\"linux/amd64\",\"linux/arm64\"]}" >> $GITHUB_OUTPUT

  # 第二步：构建和推送
  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
      fail-fast: false  # 一个平台失败不影响其他平台

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 提取平台架构信息
        id: platform
        run: |
          platform=${{ matrix.platform }}
          arch=$(echo $platform | cut -d '/' -f2)
          echo "arch=${arch}" >> $GITHUB_OUTPUT

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # 使用更新的 buildkit 版本提高性能
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 元数据设置
      - name: Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=latest-${{ steps.platform.outputs.arch }}
            type=ref,event=branch
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Mastodon
            org.opencontainers.image.description=Your self-hosted, globally interconnected microblogging community

      # 构建和推送
      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.platform }}
            type=registry,ref=${{ env.REGISTRY_IMAGE }}:latest-${{ steps.platform.outputs.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}

  # 第三步：创建多架构清单（可选）
  create-manifest:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 创建并推送清单
        run: |
          manifest_tags=("latest" "develop")
          for tag in "${manifest_tags[@]}"; do
            docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${tag} \
              ${{ env.REGISTRY_IMAGE }}:latest-amd64 \
              ${{ env.REGISTRY_IMAGE }}:latest-arm64
          done
